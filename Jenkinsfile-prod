#!/usr/bin/env groovy

def storeArtifacts(buildStatus) {
    if (buildStatus == 'ABORTED') {
        sh 'OPENSHIFT_TEST_LOGDIR="/tmp/testlogs" ./systemtests/scripts/collect_logs.sh "artifacts"'
    }
}

def tearDownOpenshift() {
    echo "tear down openshift"
    sh './systemtests/scripts/teardown-openshift.sh'
}

pipeline {
    agent {
        node {
            label 'enmasse'
        }
    }
    environment {
        MAILING_LIST = credentials('MAILING_LIST')
    }
    parameters {
        string(name: 'MAILING_LIST', defaultValue: '', description: '')
    }
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
                sh 'docker stop $(docker ps -q) || true'
                sh 'docker rm $(docker ps -a -q) -f || true'
                sh 'docker rmi $(docker images -q) -f || true'
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'git submodule update --init --recursive'
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                sh './systemtests/scripts/setup-openshift.sh'
                sh 'sudo chmod -R 777 /var/lib/origin/openshift.local.config'
            }
        }
        stage('system tests') {
            environment {
                DISPLAY = ':10'
                ARTIFACTS_DIR = 'artifacts'
                JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME)}"
                OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
                DOCKER_REGISTRY = credentials('docker-registry-host')
                DOCKER_ORG = credentials('docker-project')
                DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
                DOCKER_PASS = "${env.DOCKER_CREDENTIALS_PSW}"
                DOCKER_USER = "${env.DOCKER_CREDENTIALS_USR}"
                COMMIT = 'latest'
                ADDRESS_CONTROLLER_IMAGE = 'amqmaas10-addresscontroller-openshift'
                STANDARD_CONTROLLER_IMAGE = 'amqmaas10-standardcontroller-openshift'
                ROUTER_IMAGE = 'amqmaas10-interconnect-openshift'
                ARTEMIS_IMAGE = 'amqmaas10-broker-openshift'
                TOPIC_FORWARDER_IMAGE = 'amqmaas10-topicforwarder-openshift'
                ROUTER_METRICS_IMAGE = 'amqmaas10-routermetrics-openshift'
                CONFIGSERV_IMAGE = 'amqmaas10-configserv-openshift'
                QUEUE_SCHEDULER_IMAGE = 'amqmaas10-queuescheduler-openshift'
                RAGENT_IMAGE = 'amqmaas10-ragent-openshift'
                SUBSERV_IMAGE = 'amqmaas10-subserv-openshift'
                AGENT_IMAGE = 'amqmaas10-agent-openshift'
                MQTT_GATEWAY_IMAGE = 'amqmaas10-mqttgateway-openshift'
                MQTT_LWT_IMAGE = 'amqmaas10-mqttlwt-openshift'
                NONE_AUTHSERVICE_IMAGE = 'amqmaas10-noneauthservice-openshift'
                KEYCLOAK_IMAGE = 'redhat-sso-7/sso72'
                KEYCLOAK_PLUGIN_IMAGE = 'amqmaas10-auth-openshift'
                KEYCLOAK_CONTROLLER_IMAGE = 'amqmaas10-auth-controller-openshift'

                KEYCLOAK_HOME = '/opt/eap'
                ADD_KEYCLOAK_USER = 'true'
                NODE_CMD = '/opt/app-root/src/bin/launch_node.sh'
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    sh 'make -C templates || true'
                    sh "./systemtests/scripts/run_test_component.sh templates/install /var/lib/origin/openshift.local.config/master/admin.kubeconfig systemtests"
                }
            }
        }
    }
    post {
        always {
            storeArtifacts(currentBuild.result) //store artifacts if build was aborted - due to timeout reached
            //store test results from build and system tests
            junit '**/TEST-*.xml'

            //archive test results and openshift logs
            archive '**/TEST-*.xml'
            archive 'artifacts/**'
            archive 'templates/install/**'
            sh "sudo tar -czvf core-dumps.tar.gz ${env.CORES_DIR}/"
            sh "sudo mv core-dumps.tar.gz artifacts/"
            archive 'artifacts/**'
            tearDownOpenshift()
            sh "./systemtests/scripts/check_and_clear_cores.sh ${env.CORES_DIR}"
        }
        failure {
            echo "build failed"
            mail to: "$MAILING_LIST", subject: "EnMasse build has finished with ${result}", body: "See ${env.BUILD_URL}"
        }
    }
}
